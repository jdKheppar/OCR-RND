# -*- coding: utf-8 -*-
"""paddlePDFs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ex0SVBh4LM-LzjfRWZk5nmUSBFkebzJc
"""

!apt-get install -y poppler-utils
!pip install pdf2image paddleocr paddlepaddle numpy paddleocr==2.3.0 pillow pandas
from PIL import Image
import zipfile
import os
from paddleocr import PaddleOCR
from pdf2image import convert_from_path
import os
import pandas as pd
import re
import numpy as np

# Initialize PaddleOCR with the English language model
ocr = PaddleOCR(use_angle_cls=True, lang='en')

# Define keys to extract Globally
keys_to_extract = [
    'PATIENT NAME', 'MAIL ADDR', 'SS$', 'CITY/ST', 'PHONE', 'OCCUPATION',
    'PREF LANGUAGE', 'FC', 'ADMT PHYS', 'HSV', 'DOB', 'ADMT PHYS PHONE',
    'RLG', 'AGE', 'RACE', 'ATTEND PHYS', 'MS', 'SEX', 'REF PHY', 'PHN',
    'SMK', 'PCP PHY', 'PHN', 'VAL', 'PT', 'ETHNICITY', "FATHER'S DOB", "MOTHER'S DOB"
]

# Function to extract information from recognized text
def extract_info(content, key):
    pattern = rf"{key}:?\s*([^:\n]+)"
    match = re.search(pattern, content, re.IGNORECASE)

    if match:
        value = match.group(1).replace(re.escape(f"{key}:?"), '').strip()
        stop_index = re.search(r"(?:DOB|MAIL ADDR|SS\$|CITY/ST|PHONE|OCCUPATION|PREF LANGUAGE|FC|ADMT PHYS|HSV|ADMT PHYS PHONE|RLG|AGE|RACE|ATTEND PHYS|MS|SEX|REF PHY|PHN|SMK|PCP PHY|VAL|PT|ETHNICITY|FATHER'S DOB|MOTHER'S DOB)", value, re.IGNORECASE)

        return value[:stop_index.start()] if stop_index else value[:stop_index]


    return None

def process_ocr_results(ocr_results, pdf_base_name, output_folder):
    # Create a folder for JSON files
    json_folder = os.path.join(output_folder, 'json_files')
    os.makedirs(json_folder, exist_ok=True)

    for result in ocr_results:
        recognized_text = result[1][0]  # Extract the recognized text

        # Extract information based on the pattern for each key
        results = {}
        for key in keys_to_extract:
            results[key] = extract_info(recognized_text, key)

        # Perform further processing or save results as needed
        # For example, you can call a function here with the extracted results
        process_extracted_info(results, pdf_base_name, json_folder)

# Function to perform further processing with extracted information
def process_extracted_info(extracted_info, pdf_base_name, json_folder):
    # Your custom processing logic here
    # For example, you can save the results to a JSON file
    json_filename = f"{pdf_base_name}_info.json"
    json_filepath = os.path.join(json_folder, json_filename)
    with open(json_filepath, 'w', encoding='utf-8') as json_file:
        json.dump(extracted_info, json_file, indent=2)

def convert_pdfs_to_images(input_folder, output_folder):

    # Get all PDF files in the input folder
    pdf_files = [file for file in os.listdir(input_folder) if file.endswith(".pdf")]

    # Initialize keras-ocr pipeline


    # Process each PDF
    for pdf_file in pdf_files:
        pdf_base_name = os.path.splitext(pdf_file)[0]
        pdf_file_path = os.path.join(input_folder, pdf_file)

        # Convert PDF to an image
        images = convert_from_path(pdf_file_path, fmt="jpeg")

        # Save the image to the output folder
        #image_path = f"{output_folder}/{pdf_base_name}.jpeg"
        #images[0].save(image_path)
        # read file
        #image = np.array(Image.open(image_path))

        # Perform OCR on the image
        #resultN = ocr.ocr(image, cls=True)
        resultN = ocr.ocr(np.array(images[0]), cls=True)
        process_ocr_results(resultN, pdf_base_name, output_folder)
        inner_result = resultN[0]
        # Extract the recognized text
        # Extract the recognized text line by line
        recognized_text = [res[1][0] for res in inner_result]
        #print(recognized_text)
        # Create a text file for each image
        text_filename = pdf_base_name + '.txt'
        text_filepath = os.path.join(output_folder, text_filename)
        with open(text_filepath, 'w', encoding='utf-8') as file:
            file.write('\n'.join(recognized_text))



# Example usage:
input_folder_path = "/content"  # Change this to the path of your input folder
output_folder_path = "/content/output_images"

# Create the output folder if it doesn't exist
if not os.path.exists(output_folder_path):
    os.makedirs(output_folder_path)

# Convert PDFs to images and extract text
convert_pdfs_to_images(input_folder_path, output_folder_path)
# Zip all text files
zip_filename = '/content/ocr_results.zip'
with zipfile.ZipFile(zip_filename, 'w') as zip_file:
    for root, _, files in os.walk(output_folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            arcname = os.path.relpath(file_path, output_folder_path)
            zip_file.write(file_path, arcname=arcname)



# Zip all the json files
#write code here