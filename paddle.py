# -*- coding: utf-8 -*-
"""paddle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1egme0x3q2AzoY9VSJle8gzZXEnzVnGpm
"""

!pip install paddleocr paddlepaddle pillow numpy
!pip install paddleocr==2.3.0
import zipfile
import os
from paddleocr import PaddleOCR
from PIL import Image
import numpy as np
# Initialize PaddleOCR with the English language model
ocr = PaddleOCR(use_angle_cls=True, lang='en')

image_path = '/content/1.jpeg'

# Load the image as a NumPy array
image = np.array(Image.open(image_path))

# Perform OCR on the image
result = ocr.ocr(image, cls=True)
inner_result = result[0]

for res in inner_result:
    print(res[1][1])#value
    print(res[1][0])#accuracy
#store all the text in string, don't store the

for res in inner_result:
    print(res[1][0])#value

# Initialize variables to store extracted information
patient_info = {}
guarantor_info = {}
payor_info = {}

# Variables to track whether 'CITY/STATE' and 'DOB' have been found
city_state_found = False
dob_found = False
relCount = 0
sexB = False
phoneB = False
# Iterate through the recognized lines
for res in inner_result:
    value = res[1][0]
    accuracy = res[1][1]

    # Function to extract information based on the pattern
    def extract_info(key, value):
        if key in value and accuracy >= 0.4:
            key_len = len(key)
            if ':' in value:
                extracted_value = value.split(':', 1)[1].strip()
            else:
                extracted_value = value[key_len:].strip()

            return key, extracted_value
        else:
          print("Accuracy problem in key",key)
        return None

    # Check for specific fields and extract information
    extracted_info = extract_info('PATIENT NO', value)
    if extracted_info:
        patient_info[extracted_info[0]] = extracted_info[1]

    extracted_info = extract_info('PATIENT NAME', value)
    if extracted_info:
        patient_info[extracted_info[0]] = extracted_info[1]

    extracted_info = extract_info('SS#', value)
    if extracted_info:
        patient_info[extracted_info[0]] = extracted_info[1]

    extracted_info = extract_info('PHYSICAL ADDR', value)
    if extracted_info:
        patient_info[extracted_info[0]] = extracted_info[1]

    # Check for 'CITY/STATE' and update only if not found before
    if not city_state_found:
        extracted_info = extract_info('CITY/STATE', value)
        if extracted_info:
            patient_info[extracted_info[0]] = extracted_info[1]
            city_state_found = True

    extracted_info = extract_info('PHONE', value)
    if extracted_info:
        patient_info[extracted_info[0]] = extracted_info[1]

    # Check for 'DOB' and update only if not found before
    if not dob_found:
        extracted_info = extract_info('DOB', value)
        if extracted_info:
            patient_info[extracted_info[0]] = extracted_info[1]
            dob_found = True

    extracted_info = extract_info('SEX', value)
    if extracted_info:
        patient_info[extracted_info[0]] = extracted_info[1]

    extracted_info = extract_info('ETHNICTY', value)
    if extracted_info:
        patient_info[extracted_info[0]] = extracted_info[1]

    extracted_info = extract_info('GUARANTOR', value)
    if extracted_info:
        guarantor_info[extracted_info[0]] = extracted_info[1]

    extracted_info = extract_info('REL', value)
    if extracted_info:
        relCount = relCount+1
        if relCount==3:
          guarantor_info[extracted_info[0]] = extracted_info[1]

    extracted_info = extract_info('ADDRESS 1', value)
    if extracted_info:
        guarantor_info[extracted_info[0]] = extracted_info[1]

    # Check for 'PLAN NAME', 'INSURED', 'SEX/REL' and store information based on occurrences and confidence
    extracted_info = extract_info('PLAN NAME', value)
    if extracted_info:
        key = 'PLAN NAME ' + str(len([k for k in payor_info if 'PLAN NAME' in k]) + 1)
        payor_info[key] = extracted_info[1]

    extracted_info = extract_info('INSURED', value)
    if extracted_info:
        key = 'INSURED ' + str(len([k for k in payor_info if 'INSURED' in k]) + 1)
        payor_info[key] = extracted_info[1]

    extracted_info = extract_info('SEX/REL', value)
    if extracted_info:
        key = 'SEX/REL ' + str(len([k for k in payor_info if 'SEX/REL' in k]) + 1)
        payor_info[key] = extracted_info[1]

# Print the extracted information
print("Patient Info:", patient_info)
print("Guarantor Info:", guarantor_info)
print("Payor Info:", payor_info)