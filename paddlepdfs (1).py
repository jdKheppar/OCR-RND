# -*- coding: utf-8 -*-
"""paddlePDFs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MV2azfXMYHlT-xBSNojeyUT3i5nb2L6N
"""

!apt-get install -y poppler-utils
!pip install pdf2image

from pdf2image import convert_from_path
import os
import zipfile
import pandas as pd

!pip install paddleocr paddlepaddle pillow numpy
!pip install paddleocr==2.3.0
from paddleocr import PaddleOCR
from PIL import Image
import numpy as np
# Initialize PaddleOCR with the English language model
ocr = PaddleOCR(use_angle_cls=True, lang='en')

import csv
import re

def convert_pdfs_to_images(input_folder, output_folder):

    # Get all PDF files in the input folder
    pdf_files = [file for file in os.listdir(input_folder) if file.endswith(".pdf")]

    # Process each PDF
    for pdf_file in pdf_files:
        pdf_base_name = os.path.splitext(pdf_file)[0]
        pdf_file_path = os.path.join(input_folder, pdf_file)

        # Convert PDF to an image
        images = convert_from_path(pdf_file_path, fmt="jpeg")

        # Perform OCR on the image
        resultN = ocr.ocr(np.array(images[0]), cls=True)
        inner_result = resultN[0]

        # Variables to track whether 'CITY/STATE' and 'DOB' have been found
        city_state_found = False
        dob_found = False
        relCount = 0
        sexB = False
        phoneB = False
        ssnB = False

        # Containers to accumulate results for each field
        # Containers to accumulate results for each field
        patient_results = {'filename': pdf_base_name}

        # Iterate through the recognized lines
        for res in inner_result:
            value = res[1][0]
            accuracy = res[1][1]
            patternSSN = r'^[sS].*?\*{0,3}\d{3}$'

            # Check for specific fields and extract information
            if 'PATIENT NO' in value:
                patient_results['PATIENT NO'] = accuracy
            if 'M/R NO' in value:
                patient_results['M/R NO'] = accuracy
            if 'PATIENT NAME' in value:
                patient_results['PATIENT NAME'] = accuracy
            if re.match(patternSSN, value) and not ssnB:
              patient_results['SS#'] = accuracy
            if 'PHYSICAL ADDR' in value:
                patient_results['PHYSICAL ADDR'] = accuracy

            # Check for 'CITY/STATE' and update only if not found before
            if not city_state_found and 'CITY/STATE' in value:
                patient_results['CITY/STATE'] = accuracy
                city_state_found = True
            if 'PHONE' in value and not phoneB:
              patient_results['PHONE'] = accuracy

            # Check for 'DOB' and update only if not found before
            if not dob_found and 'DOB' in value:
                patient_results['DOB'] = accuracy
                dob_found = True

            if 'SEX' in value and not sexB:
                patient_results['SEX'] = accuracy

            if 'ETHNICTY' in value:
                patient_results['ETHNICTY'] = accuracy

            if 'GUARANTOR' in value:
                patient_results['GUARANTOR'] = accuracy

            if 'REL' in value:
                relCount = relCount + 1
                if relCount == 3:
                    patient_results['REL'] = accuracy

            if 'ADDRESS 1' in value:
                patient_results['ADDRESS 1'] = accuracy

            # Check for 'PLAN NAME', 'INSURED', 'SEX/REL' and store information based on occurrences and confidence\
            if 'PAYOR NAME' in value:
              key = 'PAYOR NAME' + str(len([k for k in patient_results if 'PAYOR NAME' in k]) + 1)
              patient_results[key] = accuracy

            if 'PLAN NAME' in value:
                key = 'PLAN NAME' + str(len([k for k in patient_results if 'PLAN NAME' in k]) + 1)
                patient_results[key] = accuracy

            if 'INSURED' in value:
                key = 'INSURED' + str(len([k for k in patient_results if 'INSURED' in k]) + 1)
                patient_results[key] = accuracy

            if 'SEX/REL' in value:
                key = 'SEX/REL' + str(len([k for k in patient_results if 'SEX/REL' in k]) + 1)
                patient_results[key] = accuracy




        # Check if no results were found, assign 'Not Found' to each field individually
        fields_to_check = ['PATIENT NO',' M/R NO', 'PATIENT NAME','SS#', 'PHYSICAL ADDR', 'CITY/STATE', 'PHONE', 'DOB', 'SEX', 'ETHNICTY', 'GUARANTOR', 'REL', 'ADDRESS 1', 'PLAN NAME1','PLAN NAME2', 'INSURED1','INSURED2', 'SEX/REL1','SEX/REL2','PAYOR NAME1','PAYOR NAME2']

        for field in fields_to_check:
            if field not in patient_results:
                patient_results[field] = 'Not Found'

        # Write to insights.csv after processing each PDF
        fieldnames = list(patient_results.keys())

        insights_csv_path = os.path.join(output_folder, "PatientInsights.csv")
        with open(insights_csv_path, 'a', newline='') as csvfile:
            # Write header if the file is empty
            if os.stat(insights_csv_path).st_size == 0:
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()

            # Write row for each field
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writerow(patient_results)

# Example usage:
input_folder_path = "/content"  # Change this to the path of your input folder
output_folder_path = "/content/output_folder"

# Create the output folder if it doesn't exist
if not os.path.exists(output_folder_path):
    os.makedirs(output_folder_path)

# Convert PDFs to images and extract text
convert_pdfs_to_images(input_folder_path, output_folder_path)